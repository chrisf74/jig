do (Backbone, Marionette, Jig, $, _) ->
  class Jig.Application extends Marionette.Application
    templateHelpers: {}
    routeInstances : []
    ajaxOptions    : {}

    # Set default history options.
    historyOptions: do ->
      options = {pushState:false, root:'#'}

      if (history?.pushState)
        options = {pushState:true, root:'/'}

      return options

    # Extend app instance...
    constructor: (options = {}) ->
      for appExt in Jig.appExts then appExt(@)

      _.extend @templateHelpers,
        getRouteUrl: _.bind @getRouteUrl, @

      @pageState = options.pageState
      @pageState or= new Jig.PageState

      super options

    # Wrap history navigate method for convenience.
    navigate: (args...) ->
      Backbone.history.navigate args...

    # Find route instance by name and call its getUrl
    # method with params to generate the url.
    getRouteUrl: (routeName, params) ->
      route = @routeInstances[routeName]

      unless route
        throw "#{routeName} route does not exist"

      route.getUrl params

    # Find route instance by name and navigate to the
    # url generated by calling the routes getUrl method.
    redirectToRoute: (routeName, params = {}, options = {}) ->
      route = @routeInstances[routeName]

      unless route
        throw "#{routeName} route does not exist"

      options.trigger ?= true
      options.replace ?= true

      @navigate route.getUrl(params), options

    # Make ajax promise object.
    makeAjaxPromise: (options) ->
      deferred = Q.defer()
      options  = _.extend {}, @ajaxOptions, options

      request = $.ajax(options)
      .done (response) =>
        deferred.resolve response
      .fail (args...) =>
        deferred.reject args

      promise = deferred.promise
      promise.abort = -> request.abort()

      return promise
